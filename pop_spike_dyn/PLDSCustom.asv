% PLDS toolbox example
%
% Lars Buesing, Jakob H Macke, 2014
%


clear all
close all

%% customized part
xDim    = 5;												% latent dimension
yDim    = 14;											    	% observed dimension = no of neurons
T       = 100;												% no of time bins per trial; here a time step is approx 10ms 
Trials  = 100;		    										% no trials
maxIter = 100;

train_trials = 80;
test_trials = 20;

 
data = load("PSTH_format_CSM009_NoEx_BSLN_0_20191108_tilt.mat");
relative_response = data.psth_struct.LEFT.event_9.relative_response;       % choose event 9

for tr = 1: Trials
    format_data = transpose(reshape(relative_response(tr, :), [150, 14]));
    whole(tr).y = format_data;
    whole(tr).T = T;
    train(tr).y = format_data(:, 1: 100);
    train(tr).T = T;
end

% % split training set
% for tr = 1: train_trials
%     train(tr).y = transpose(reshape(relative_response(tr, :), [150, 14]));
%     train(tr).T = T;
% end

% % split testing set
% for tr = 1: test_trials
%     test(tr).y = transpose(reshape(relative_response(train_trials + tr, :), [150, 14]));
%     test(tr).T = T;
% end

%% 
seq = train;
params = [];

% initialize parameters, options are:
% - Poisson SSID 'PLDSID', see [Spectral learning of linear dynamics from generalised-linear observations with application to neural population data. Buesing et al. 2012 NIPS]
% - Nuclear norm penalized rate estimation 'NucNormMin' [Robust learning of low-dimensional dynamics from large neural ensembles. Pfau et al. NIPS 2013]
% - Exponential family 'ExpFamPCA'
params = PLDSInitialize(seq,xDim,'NucNormMin',params);

params.model.inferenceHandle = @PLDSLaplaceInference;                                                   % comment out for using variational infernce
params.opts.algorithmic.EMIterations.maxIter     = maxIter;						% setting max no of EM iterations
params.opts.algorithmic.EMIterations.maxCPUTime  = 600;							% setting max CPU time for EM to 600s
tic; [params seq varBound EStepTimes MStepTimes] = PopSpikeEM(params,seq); toc;                         % do EM iterations
% fprintf('Subspace angle between true and estimated loading matrices: %d\n',subspace(tp.model.C,params.model.C))


%%%% compare ground thruth and estimated model

figure;
plot(varBound)
title('expected log-likelihood as function of EM iterations')

%% make prediction
% 
% pred_psth = zeros(yDim, T);
% for tr = 1: Trials
%     x = zeros(xDim, T);
%     y = zeros(yDim, T);
%     spikes = zeros(yDim, T);
%     x(:, 1) = mvnrnd(params.model.x0, (params.model.Q0 + params.model.Q0.') / 2);
%     y(:, 1) = exp(params.model.C * x(:, 1) + params.model.d);
%     spikes(:, 1) = poissrnd(y(:, 1));
%     for t = 2: T
%         x(:, t) = mvnrnd(params.model.A * x(:, t - 1), params.model.Q);
%         y(:, t) = exp(params.model.C * x(:, t) + params.model.d);
%         spikes(:, t) = poissrnd(y(:, t));
%     end
%     pred_psth = pred_psth + spikes;
% end
% 
% pred_psth = pred_psth / Trials;
% 
% figure
% plot(pred_psth(3, :));
% hold on;
% plot(data.psth_struct.LEFT.event_9.sig009a.psth);
% legend("predicted psth", "true psth");
% title("Comparision between predicted psth and true psth of neuron sig009a");


%% compute sipke count error on predicted results
% [seq varBound] = params.model.inferenceHandle(params,test);

prediction = zeros(Trials, yDim, 50);
ave_trial_error = zeros(yDim, 1);
ave_trial_count = zeros(yDim, 1);
ave_bin_error = zeros(yDim, 50);
for tr = 1: Trials
    x = zeros(xDim, 50);
    y = zeros(yDim, 50);
    spikes = zeros(yDim, 50);
    x(:, 1) = mvnrnd(seq(tr).posterior.xsm(:, 100), params.model.Q);
    y(:, 1) = exp(params.model.C * x(:, 1) + params.model.d);
    spikes(:, 1) = poissrnd(y(:, 1));
    for t = 2: 50
        x(:, t) = mvnrnd(params.model.A * x(:, t - 1), params.model.Q);
        y(:, t) = exp(params.model.C * x(:, t) + params.model.d);
        spikes(:, t) = poissrnd(y(:, t));
    end
    prediction(tr, :, :) = spikes;
    ave_trial_error = ave_trial_error + sum(abs(spikes - whole(tr).y(:, 101: 150)), 2);
    ave_trial_count = ave_trial_count + sum(whole(tr).y(:, 101: 150), 2);
    ave_bin_error = ave_bin_error + whole(tr).y(:, 101: 150) - spikes; 
end
ave_trial_error = ave_trial_error / Trials / 50;
ave_trial_count = ave_trial_count / Trials;
ave_bin_error = ave_bin_error / Trials;
%%
figure
a = squeeze(sum(prediction(:, 2, :), 1)) / Trials;
b = data.psth_struct.LEFT.event_9.sig002c.psth(1: 100)';
plot(cat(1, b, a));
hold on;
plot(data.psth_struct.LEFT.event_9.sig002c.psth);
hold on;
plot(cat(1, zeros(100), 
legend("predicted psth", "true psth");
title("Comparision between predicted psth and true psth of neuron sig002c");

figure
plot(